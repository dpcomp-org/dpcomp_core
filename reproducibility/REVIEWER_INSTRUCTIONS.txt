================================================================================
Readme for reproducibility submission of paper ID mod392

Quick start:

    Using our quick start script, it is possible to reproduce a simplified version of the plots in the paper that cover a minimal subset of experiments. This script has no dependencies except that reprounzip must be on your path. It will perform all necessary steps from downloading source code, to running experiments, and finally generating plots. Below we also discus how to modify the experimental configuration to generate more comprehensive experimental results. The reviewer might find it easiest to modify the quick start script when making changes to the experimental configuration. Quick start can be downloaded and run as follows.

    wget "http://dpcomp-reproducibility.s3.amazonaws.com/quick_start.sh?AWSAccessKeyId=AKIAJH5R657YMTEADPFA&Expires=1487407728&Signature=aMrjBinemh1NIjpKmx68g6JZG5g%3D"
    mv quick_start* quick_start.sh
    bash quick_start.sh

A) Source code info
Repository: 

    sigmod2016.rpz: http://dpcomp-reproducibility.s3.amazonaws.com/sigmod2016.rpz?AWSAccessKeyId=AKIAJH5R657YMTEADPFA&Expires=1487083527&Signature=JEFvC1xZMdZ7v4mQOtVRmeBkYEQ%3D
    plot.rpz: http://dpcomp-reproducibility.s3.amazonaws.com/plot.rpz?AWSAccessKeyId=AKIAJH5R657YMTEADPFA&Expires=1487058535&Signature=%2FbxtWUdz3vGLKhK0STzNtMaTTZw%3D

Programming Language: 

    Python/R

Additional Programming Language info: 

    None

Compiler Info: 

    CPython

Packages/Libraries Needed: 

    It should only be necessary to install reprounzip. On Ubuntu 14.04, the following Debian packages are required to do so.

        python-pip 
        python-dev 
        libffi-dev 
        libssl-dev 
        libsqlite3-dev

B) Datasets info

Repository: 

    All datasets are part of the source code repository, which is contained in the reprozip archive sigmod2016.rpz.

Data generators: 

    None

C) Hardware Info

    There are no special hardware requirements except that the machine should have at least 8GB of RAM. We have successfully reproduced our results using the steps below on an Amanzon EC2 Large instance running Ubuntu 14.04 as well as another EC2 Large instance running Red Hat EL7.

D) Experimentation Info

D1) Scripts and how-tos to generate all necessary data or locate datasets

    All datasets are in the source code repository (found in the reprozip archive sigmod2016.rpz) and are automatically loaded by the experiment execution scripts.

D2) Scripts and how-tos to prepare the software for system

    In order to prepare to run the experimental software it is necessary only to prepare reprounzip. On Ubuntu 14.04, this can be done with the commands below.

        sudo pip install -U pip
        sudo pip install cryptography reprounzip[all]
        sudo reprounzip chroot setup sigmod2016.rpz sigmod2016
        sudo reprounzip chroot setup plot.rpz plot

D3) Scripts and how-tos for all experiments executed for the paper

    We provide a single script, sigmod2016.py, for executing all experiments necessary to generate figures 1a, 1b, 2a, 2b, and 2c, from the paper. The experiments should be executed in three groups: overall-error, error-by-shape, and error-by-size. Each group generates output sufficient to recreate a different subset of the plots.  Output from overall-error can be used to recreate figures 1a and 1b, output from error-by-shape is sufficient for figures 2a and 2b, while error-by-size recreates figure 2c.

    The script sigmod2016.py is a single-threaded application. Thus in order to exploit concurrency on the host system we recommend splitting parameters between separate invocations. Every parameter type (such as algorithm, dataset, domain, or scale) can be split, *except* for the number of seeds. For example, instead of invoking sigmod2016.py by passing both "Identity" and "DAWA" for the choice of 1D algorithms, it is possible to instead invoke sigmod2016.py two separate times with each algorithm run in a separate invocation. However, if 10 different seeds are desired for each algorithm, it is necessary to run all 10 seeds in each invocation because sigmod2016.py performs aggregation of experimental results across seeds. The individual invocations will create separate output files, which can be passed collectively to the plot script (described below). The plot script is capable of concatenating experimental results from multiple files, producing a single plot from the aggregate data.

    ### Fast running, less comprehensive experiments ###

    Executing all the experiments requires a large amount of computation, so here we provide a subset of experiments that finish quickly (usually within 10 minutes). The result of the experiments listed below will provide a subset of results that can be used as a quick check of the whole work-flow. Note that the subset experiments generated with the commands below is identical to the set that are run using the quick start script (described at the top of this file). 

    The overall-error output can be generated from the same directory where sigmod2016 has been unpacked with the following command line.

        sudo reprounzip chroot run sigmod2016 --cmdline python execution/sigmod2016.py run --a1 "HB","Identity","DAWA" \
            --a2 "HB","Identity","DAWA" \
            --x1 'HEPTH','ADULTFRANK' \
            --x2 'SF-CABS-E','SF-CABS-S' \
            --d1 4096 --d2 "(128,128)" \
            --s1 1000,100000 --s2 10000,1000000 \
            --se 5 --sd 5 --out "overall-error.json"
        cp sigmod2016/root/home/ubuntu/Documents/dpcomp-core/reproducibility/overall-error.json .

    The error-by-shape output can be generated from the same directory where sigmod2016 has been unpacked with the following command line.

        sudo reprounzip chroot run sigmod2016 --cmdline python execution/sigmod2016.py run --a1 "HB","Identity","DAWA" \
            --a2 "DAWA","HB" \
            --x1 'ADULTFRANK','INCOME','MDSALARY-FA','MDSALARY','NETTRACE','MEDCOST','LC-REQ-F1' \
            --x2 'SF-CABS-E','SF-CABS-S','BEIJING-CABS-E','BEIJING-CABS-S' \
            --d1 4096 --d2 "(128,128)" \
            --s1 1000 --s2 10000 \
            --se 5 --sd 5 --out "error-by-shape.json"
        cp sigmod2016/root/home/ubuntu/Documents/dpcomp-core/reproducibility/error-by-shape.json .

    The error-by-size output can be generated from the same directory where sigmod2016 has been unpacked with the following command line.

        sudo reprounzip chroot run sigmod2016 --cmdline python execution/sigmod2016.py run --a1 "Identity" \
            --a2 "DAWA","HB" \
            --x1 'HEPTH' \
            --x2 'BEIJING-CABS-E','ADULT-2D' \
            --d1 128 --d2 "(64,64)","(32,32)" \
            --s1 1000 --s2 10000,1000000 \
            --se 5 --sd 5 --out "error-by-size.json"
        cp sigmod2016/root/home/ubuntu/Documents/dpcomp-core/reproducibility/error-by-size.json .

    Please check that the figures can be generated successfully (see D4 for instructions) before trying to run the full set of experiments. Plots from the quick result may contain empty data items, since places are held for not-completed experiments.

    ### Slower running, more comprehensive experiments ###
    
    Run Time Note: It takes approximately one week to run the entire set of experiments on a machine with four 3.30GHZ Xeon cores and 24GB of memory. A subset of experiments could be specified by modifying the parameters. Blow we provide rough runtime guidelines.

        Algorithms:
            Finishing time varies dramatically across algorithms. Here we provide a rough classification of each algorithm based on its estimated runtime.
            --a1    1D Algorithms [default: ALL]    
                Fast    :"HB","Identity","DAWA","Uniform","EFPA"
                Medium  :"DPCube",MWEM","PHP"
                Slow    :"AHP*","MWEM*","SF"
            --a2    2D Algorithms [default: ALL]
                Fast    :"Identity","HB","Uniform","UGrid","AGrid"
                Medium  :"MWEM","DAWA","QuadTree","DPCube"
                Slow    :"MWEM*","AHP"

        Number of Seeds:
            Each experimental configuration is run with the given quantity of seeds. The "se" parameter controls the number of seeds used to run each experiment at the highest level. By specifying the "sd" parameter, it is also possible to vary the number of seeds used to generate each specified dataset. Each dataset seed is run for all experimental seeds. Please make sure that at least 2 seeds total are used for each experiment, i.e. se * sd >= 2.
            --se    Execution Seeds: [default: 5] 
            --sd    Dataset Seeds: [default: 5]

    After checking with the quick version, the overall-error output can be generated from the same directory where sigmod2016 has been unpacked with the following command line. 

        sudo reprounzip chroot run sigmod2016 --cmdline python execution/sigmod2016.py run --a1 "AHP*","HB","Identity","MWEM*","DAWA","PHP","MWEM","EFPA","DPCube","SF","Uniform" \
            --a2 "ALL" \
            --x1 'HEPTH','ADULTFRANK','INCOME','MEDCOST','NETTRACE','PATENT','SEARCHLOGS','BIDS-FJ','BIDS-FM','BIDS-ALL','MDSALARY','MDSALARY-FA','LC-REQ-F1','LC-REQ-F2','LC-REQ-ALL','LC-DTIR-F1','LC-DTIR-F2','LC-DTIR-ALL' \
            --x2 'SF-CABS-E','SF-CABS-S','GOWALLA','BEIJING-CABS-E','BEIJING-CABS-S','ADULT-2D','MDSALARY-OVERT','LOAN-FUNDED-INCOME','STROKE' \
            --d1 4096 --d2 "(128,128)" \
            --s1 1000,100000,10000000 --s2 10000,1000000,100000000 \
            --se 5 --sd 5 --out "overall-error.json"
        cp sigmod2016/root/home/ubuntu/Documents/dpcomp-core/reproducibility/overall-error.json .

    The error-by-shape output can be generated from the same directory where sigmod2016 has been unpacked with the following command line.

        sudo reprounzip chroot run sigmod2016 --cmdline python execution/sigmod2016.py run --a1 "EFPA","HB","Identity","MWEM*","DAWA","PHP","MWEM","Uniform" \
            --a2 "Uniform","AGrid","DAWA","HB","Identity" \
            --x1 'HEPTH','ADULTFRANK','INCOME','MEDCOST','NETTRACE','PATENT','SEARCHLOGS','BIDS-FJ','BIDS-FM','BIDS-ALL','MDSALARY','MDSALARY-FA','LC-REQ-F1','LC-REQ-F2','LC-REQ-ALL','LC-DTIR-F1','LC-DTIR-F2','LC-DTIR-ALL' \
            --x2 'SF-CABS-E','SF-CABS-S','GOWALLA','BEIJING-CABS-E','BEIJING-CABS-S','ADULT-2D','MDSALARY-OVERT','LOAN-FUNDED-INCOME','STROKE' \
            --d1 4096 --d2 "(128,128)" \
            --s1 1000 --s2 10000 \
            --se 5 --sd 5 --out "error-by-shape.json"
        cp sigmod2016/root/home/ubuntu/Documents/dpcomp-core/reproducibility/error-by-shape.json .

    The error-by-size output can be generated from the same directory where sigmod2016 has been unpacked with the following command line.

        sudo reprounzip chroot run sigmod2016 --cmdline python execution/sigmod2016.py run --a1 "Identity" \
            --a2 "Uniform","AGrid","DAWA","HB","Identity" \
            --x1 'HEPTH' \
            --x2 'BEIJING-CABS-E','ADULT-2D' \
            --d1 128 --d2 "(256,256)","(128,128)","(64,64)","(32,32)" \
            --s1 1000 --s2 10000,1000000 \
            --se 5 --sd 5 --out "error-by-size.json"
        cp sigmod2016/root/home/ubuntu/Documents/dpcomp-core/reproducibility/error-by-size.json .

    Because executing the full set of experiments necessary to identically reproduce the figures in the paper requires significant computational resources we have selected a representative subset of those experiments that will produce plots similar to those found in the paper. It is also possible to try different experimental combinations by varying the parameters passed to sigmod2016.py. For convenience, we have also provided a command line option for listing the full set of provided algorithms, datasets, scales, and domains. 

    From the top-level of the repository, all valid script parameters can be listed as follows.
    
        sudo reprounzip chroot run sigmod2016 --cmdline python execution/sigmod2016.py list algorithms
        sudo reprounzip chroot run sigmod2016 --cmdline python execution/sigmod2016.py list datasets
        sudo reprounzip chroot run sigmod2016 --cmdline python execution/sigmod2016.py list scales
        sudo reprounzip chroot run sigmod2016 --cmdline python execution/sigmod2016.py list domains

D4) Scripts and how-tos for all plots to be generated from experimental output

    Experimental output from the last section can be used to generate plots from the paper. The following commands will reproduce figures 1a, 1b, 2a, 2b, and 2c provided that experimental output files overall-error.json, error-by-shape.json, and error-by-size.json have already been generated and reside in the same directory as the directory "plots".  

    The figures 1a and 1b can be generated from the same directory where plot has been unpacked with the following commands. Note: when plotting output from the quick start experiments, optionally adding the switch '-q' will provide better plot formatting.

        cp overall-error.json plot/root/home/ubuntu/Documents/dpcomp-core/reproducibility
        sudo reprounzip chroot run plot --cmdline Rscript plots/plot.R -f overall-error.json -o figure_1a.pdf -t main -d 1
        cp plot/root/home/ubuntu/Documents/dpcomp-core/reproducibility/figure_1a.pdf .
        sudo reprounzip chroot run plot --cmdline Rscript plots/plot.R -f overall-error.json -o figure_1b.pdf -t main -d 2
        cp plot/root/home/ubuntu/Documents/dpcomp-core/reproducibility/figure_1b.pdf .

    The figures 2a and 2b can be generated from the same directory where plot has been unpacked with the following commands.

        cp error-by-shape.json plot/root/home/ubuntu/Documents/dpcomp-core/reproducibility
        sudo reprounzip chroot run plot --cmdline Rscript plots/plot.R -f error-by-shape.json -o figure_2a.pdf -t shape -d 1
        cp plot/root/home/ubuntu/Documents/dpcomp-core/reproducibility/figure_2a.pdf .
        sudo reprounzip chroot run plot --cmdline Rscript plots/plot.R -f error-by-shape.json -o figure_2b.pdf -t shape -d 2
        cp plot/root/home/ubuntu/Documents/dpcomp-core/reproducibility/figure_2b.pdf .

    The figure 2c can be generated from the same directory where plot has been unpacked with the following commands.

        cp error-by-size.json plot/root/home/ubuntu/Documents/dpcomp-core/reproducibility
        sudo reprounzip chroot run plot --cmdline Rscript plots/plot.R -f error-by-size.json -o figure_2c.pdf -t domain_size
        cp plot/root/home/ubuntu/Documents/dpcomp-core/reproducibility/figure_2c.pdf .

    Any of the invocations of plot.R above can also be passed multiple input files if the experimental results have been produced as the result of multiple invocations of sigmod2016.py. For example, if the overall-error payload is split between files overall-error1.json and overall-error2.json, then figure 1a can be generated with the following command line.

        sudo reprounzip chroot run plot --cmdline Rscript plots/plot.R -f overall-error1.json,overall-error2.json -o figure_1a.pdf -t main -d 1

D5) Cleanup

    When reprozip is unpacked using chroot it is critical to ensure that the chroot directory is properly unmounted before removal. The reprounzip software makes this task simple. The directories created in the steps above can be safely removed with the following commands.

        sudo reprounzip chroot destroy sigmod2016
        sudo reprounzip chroot destroy plot

================================================================================
